// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: team.proto

package team_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TeamRPC_GetTeamSummary_FullMethodName      = "/team_service_v1.TeamRPC/GetTeamSummary"
	TeamRPC_CheckTeamMembership_FullMethodName = "/team_service_v1.TeamRPC/CheckTeamMembership"
)

// TeamRPCClient is the client API for TeamRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamRPCClient interface {
	GetTeamSummary(ctx context.Context, in *GetTeamSummaryRequest, opts ...grpc.CallOption) (*GetTeamSummaryResponse, error)
	CheckTeamMembership(ctx context.Context, in *GetTeamMembershipRequest, opts ...grpc.CallOption) (*GetTeamMembershipResponse, error)
}

type teamRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamRPCClient(cc grpc.ClientConnInterface) TeamRPCClient {
	return &teamRPCClient{cc}
}

func (c *teamRPCClient) GetTeamSummary(ctx context.Context, in *GetTeamSummaryRequest, opts ...grpc.CallOption) (*GetTeamSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamSummaryResponse)
	err := c.cc.Invoke(ctx, TeamRPC_GetTeamSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRPCClient) CheckTeamMembership(ctx context.Context, in *GetTeamMembershipRequest, opts ...grpc.CallOption) (*GetTeamMembershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamMembershipResponse)
	err := c.cc.Invoke(ctx, TeamRPC_CheckTeamMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamRPCServer is the server API for TeamRPC service.
// All implementations must embed UnimplementedTeamRPCServer
// for forward compatibility.
type TeamRPCServer interface {
	GetTeamSummary(context.Context, *GetTeamSummaryRequest) (*GetTeamSummaryResponse, error)
	CheckTeamMembership(context.Context, *GetTeamMembershipRequest) (*GetTeamMembershipResponse, error)
	mustEmbedUnimplementedTeamRPCServer()
}

// UnimplementedTeamRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeamRPCServer struct{}

func (UnimplementedTeamRPCServer) GetTeamSummary(context.Context, *GetTeamSummaryRequest) (*GetTeamSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamSummary not implemented")
}
func (UnimplementedTeamRPCServer) CheckTeamMembership(context.Context, *GetTeamMembershipRequest) (*GetTeamMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTeamMembership not implemented")
}
func (UnimplementedTeamRPCServer) mustEmbedUnimplementedTeamRPCServer() {}
func (UnimplementedTeamRPCServer) testEmbeddedByValue()                 {}

// UnsafeTeamRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamRPCServer will
// result in compilation errors.
type UnsafeTeamRPCServer interface {
	mustEmbedUnimplementedTeamRPCServer()
}

func RegisterTeamRPCServer(s grpc.ServiceRegistrar, srv TeamRPCServer) {
	// If the following call pancis, it indicates UnimplementedTeamRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeamRPC_ServiceDesc, srv)
}

func _TeamRPC_GetTeamSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRPCServer).GetTeamSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRPC_GetTeamSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRPCServer).GetTeamSummary(ctx, req.(*GetTeamSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRPC_CheckTeamMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRPCServer).CheckTeamMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRPC_CheckTeamMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRPCServer).CheckTeamMembership(ctx, req.(*GetTeamMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamRPC_ServiceDesc is the grpc.ServiceDesc for TeamRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "team_service_v1.TeamRPC",
	HandlerType: (*TeamRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeamSummary",
			Handler:    _TeamRPC_GetTeamSummary_Handler,
		},
		{
			MethodName: "CheckTeamMembership",
			Handler:    _TeamRPC_CheckTeamMembership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "team.proto",
}
